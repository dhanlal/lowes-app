{"version":3,"sources":["datalist/Datainfo.js","logincompo/LoginForm.js","datalist/Freezecolum.js","datalist/createRowData.js","App.js","serviceWorker.js","index.js"],"names":["Datainfo","handleChange","bind","handleChangeImange","handleAddImage","handleUploadImage","handleDragOver","handleDragEnter","handleDragLeave","handleDrop","handleCancelUpload","state","file","dragOver","errorNoficication","rowData","isCorrect","event","this","setState","URL","createObjectURL","target","files","e","row","textError","textErrorAlert","data","value","name","checked","match","calculatePercentage","percentage","Object","entries","key","console","log","preventDefault","dataTransfer","type","split","errorNotification","setTimeout","document","getElementById","fileList","readURL","dragOverClass","reader","FileReader","onload","result","readAsDataURL","refs","image","id","className","scope","map","onChange","onDrop","onDragEnter","onDragOver","onDragLeave","imageUrl","width","height","src","alt","defaultValue","Component","LoginForm","props","onSubmit","email","history","push","password","htmlFor","placeholder","onClick","withRouter","count","columns","frozen","rows","Array","keys","i","avartar","faker","avatar","county","address","internet","title","prefix","firstName","lastName","street","streetName","zipCode","date","past","toLocaleDateString","bs","company","catchPhrase","companyName","words","lorem","sentence","Freezecolum","rowGetter","rowsCount","minHeight","App","list","path","exact","to","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dda95983.chunk.js","sourcesContent":["import React ,{Component} from 'react';\nimport \"./Datainfo.css\"\nclass Datainfo extends Component {\n    constructor() {\n        super();\n        this.handleChange = this.handleChange.bind(this);\n        this.handleChangeImange = this.handleChangeImange.bind(this);\n        this.handleAddImage = this.handleAddImage.bind(this);\n        this.handleUploadImage = this.handleUploadImage.bind(this);\n        this.handleDragOver = this.handleDragOver.bind(this);\n        this.handleDragEnter = this.handleDragEnter.bind(this);\n        this.handleDragLeave = this.handleDragLeave.bind(this);\n        this.handleDrop = this.handleDrop.bind(this);\n        this.handleCancelUpload = this.handleCancelUpload.bind(this);\n        this.state = {\n           file: null,\n           dragOver: false,\n           errorNoficication: null,\n           rowData: [{},{},{},{},{}],\n           isCorrect: true\n        };\n     }\n\n    // handling image upload event\n    handleChangeImange(event) {\n        this.setState({\n            file: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    //   handling change event in input fields\n    handleChange(e, row) {\n        let isCorrect = false;\n        let textError = false;\n        let textErrorAlert= false;\n        const data = this.state.rowData;\n        const {\n            value,\n            name,\n            checked\n        } = e.target;\n        if (name === 'checkbox') {\n            data[row][name] = checked;\n        } else if (name === 'select') {\n            data[row][name] = value != 'select' ? value : null\n        } else {\n            data[row][name] = value;\n        }\n        if (name === 'textarea') {\n            if (!value.match(/\\d/)) {  // checking whether textarea input not number\n                isCorrect = true;\n\n            } else {\n                isCorrect = false;\n                textError = \"Please enter valid text only text\"\n                textErrorAlert = \"1 Error\"\n                data[row]['textError'] = textError\n                data[row]['textErrorAlert'] = textErrorAlert\n            }\n        }\n        data[row]['isCorrect'] = isCorrect\n\n        this.setState({\n            rowData: data\n        }, () => {\n\n            this.calculatePercentage(row)\n        })\n    }\n    //  calculating percentage of filling all input fields\n    calculatePercentage(row) {\n        const data = this.state.rowData;\n        let percentage = 0;\n        for (let [key, value] of Object.entries(data[row])) {\n            if (value && key !== 'percentage' && key !== \"isCorrect\" && key !== \"textError\"  && key !== \"textErrorAlert\") {\n                percentage = percentage + 20;\n            }\n        }\n        data[row]['percentage'] = percentage;\n        this.setState({\n            rowData: data\n        })\n    }\n    /**\n       Drag and Drop Event Handlers\n    **/\n    handleDragEnter(e) {\n        console.log(e)\n        e.preventDefault();\n    }\n    handleDragOver(e) {\n        e.preventDefault();\n        if (!this.state.dragOver) {\n            this.setState({\n                dragOver: true\n            });\n        }\n    }\n    handleDragLeave(e) {\n        e.preventDefault();\n        this.setState({\n            dragOver: false\n        });\n    }\n    handleDrop(e, row) {\n        console.log(e)\n        e.preventDefault();\n        let file = e.dataTransfer.files[0];\n\n        // Validate file is of type Image\n        let fileType = file.type.split(\"/\")[0];\n        if (fileType !== \"image\") {\n            console.log(\"Not an image file\");\n            this.setState({\n                file: null,\n                errorNotification: \"Not an image File\",\n                dragOver: false\n            });\n            return setTimeout(() => {\n                this.setState({\n                    errorNotification: null\n                });\n            }, 3000);\n        }\n        // this.refs.image.files = e.dataTransfer.files;\n        document.getElementById('upload-image-input').fileList = e.dataTransfer.files[0];\n        this.readURL(file, row);\n        this.setState({\n            file,\n            dragOver: false\n        });\n    }\n\n\n    /**\n       Handle Manually (File Input) Added Files\n    **/\n    handleAddImage(e, row) {\n        e.preventDefault();\n        let file = e.target.files[0];\n\n        // Validate file is of type Image\n        let fileType = file.type.split('/')[0];\n        if (fileType !== \"image\") {\n            console.log(\"Not an image file\");\n            this.setState({\n                file: null,\n                errorNotification: \"Not an image File\",\n                dragOverClass: \"\"\n            });\n            return setTimeout(() => {\n                this.setState({\n                    errorNotification: null\n                });\n            }, 3000);\n        }\n        this.readURL(file, row);\n\n\n        this.setState({\n            file\n        });\n    }\n\n    readURL(file, row) {\n        let data = this.state.rowData;\n        if (file) {\n            var reader = new FileReader();\n\n            reader.onload = (e) => {\n                data[row]['imageUrl'] = e.target.result;\n                this.setState({\n                    rowData: data\n                }, () => {\n                    this.calculatePercentage(row);\n                })\n            }\n\n            reader.readAsDataURL(file); // convert to base64 string\n        }\n    }\n\n    /**\n       Handle Upload after Upload Button Clicked\n    **/\n    handleUploadImage(e) {\n        e.preventDefault();\n        if (this.refs.image.files[0]) {\n            console.log(\"Uploading Image \" + this.refs.image.files[0].name + \"\");\n            /**\n               Handle image Upload\n            **/\n        }\n    }\n    handleCancelUpload(e) {\n        e.preventDefault();\n        this.setState({\n            file: null\n        });\n    }\n\n\n    render(){\n\n        let dragOverClass = this.state.dragOver\n         ? `display-box drag-over`\n         : `display-box`;\n\n      // If file is set, change upload box text to file name\n      let uploadText = this.state.file\n         ? <div>\n              <h4>{this.state.file.name}</h4>\n              <button\n                 className=\"cancel-upload-button btn btn-warning\"\n                 onClick={this.handleCancelUpload}\n              >\n                 Cancel\n             </button>\n              <button\n                 className=\"upload-button btn btn-primary\"\n                 onClick={this.handleUploadImage}\n              >\n                 Upload\n              </button>\n           </div>\n         : <div>\n              <h4>Choose Files to Upload</h4>\n           </div>;\n\n      // Show Error message if file type is not an image\n      let errorNotification = this.state.errorNotification\n         ? <div className=\"error-notification\">\n              <p>{this.state.errorNotification}</p>\n           </div>\n         : null;\n\n        return (\n            <div id=\"table-scroll\" className=\"table-scroll\" >\n            <div className=\"table-wrap\">\n            <table className=\"main-table\">\n            <thead>\n                <tr>\n                <th className=\"fixed-side\" scope=\"col\">Readiness</th>\n                <th scope=\"col\">Model #</th>\n                {/* <th scope=\"col\">Brand</th> */}\n                <th scope=\"col\">Front Facing Image</th>\n                <th scope=\"col\">loren Ipsum</th>\n                <th scope=\"col\">Lowest Level GTIN</th>\n                <th scope=\"col\">Spacial Order Lead Time</th>\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    [0,1,2,3,4].map(row => (\n                <tr key={row}>\n                <th className=\"fixed-side\"><div>{this.state.rowData[row].percentage || 0} % </div> <div> {this.state.rowData[row].isCorrect ?'': this.state.rowData[row].textErrorAlert }</div></th>\n                <td><input type=\"text\" name=\"textname\" onChange={(event) => this.handleChange(event, row)} value={this.state.value ? \"\" : this.state.value }/> </td>\n                <td><input\n                     type=\"file\" name=\"imagefile\" onChange={this.handleChangeImange}\n                     id=\"upload-image-input\"\n                     className=\"upload-image-input\"\n                    //  accept=\"image/*\"\n                     onDrop={(event) => this.handleDrop(event, row)}\n                     onDragEnter={this.handleDragEnter}\n                     onDragOver={this.handleDragOver}\n                     onDragLeave={this.handleDragLeave}\n                     onChange={(event) => this.handleAddImage(event, row)}\n                  />{\n                    this.state.rowData[row].imageUrl &&\n                    <img id=\"blah\" width=\"50\" height=\"50\" src={this.state.rowData[row].imageUrl} alt=\"your image\" />\n                  }\n                  </td>\n                <td><textarea defaultValue=\"test\" name=\"textarea\" onChange={(event) => this.handleChange(event, row)}  />  {this.state.rowData[row].isCorrect ?'': this.state.rowData[row].textError }  </td>\n                <td><select name=\"select\" onChange={(event) => this.handleChange(event, row)} >\n                    <option value=\"select\">Select</option>\n                    <option value=\"grapefruit\">Grapefruit</option>\n                    <option value=\"lime\">Lime</option>\n                    <option  value=\"coconut\">Coconut</option>\n                    <option value=\"mango\">Mango</option>\n                    </select></td>\n                <td><input type=\"checkbox\"  name=\"checkbox\" onChange={(event) => this.handleChange(event, row)}/></td>\n\n                </tr>\n                    ))\n                }\n\n            </tbody>\n            </table>\n         </div>\n        </div>\n\n        )}\n};\n\nexport default Datainfo;","import React, {Component} from \"react\";\nimport \"./login.css\";\nimport { withRouter } from 'react-router';\n\nimport Datainfo from \"../datalist/Datainfo\"\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    Redirect\n  } from \"react-router-dom\";\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\"\n    };\n  }\n  onSubmit = (event) => {\n      event.preventDefault();\n    if(this.state.email){\n        console.log(this.state.email);\n        // return  <Redirect  to=\"/datainfo\" />\n        this.props.history.push('/datainfo');\n    }\n }\n\n  render() {\n    const { email, password } = this.state;\n    return (\n      <form onSubmit={this.onSubmit}>\n        <label htmlFor=\"email\">Email</label>\n        <input\n          name=\"email\"\n          type=\"text\"\n          placeholder=\"Enter your email\"\n          value={email}\n          onChange={this.handleChange}\n        />\n        <label htmlFor=\"email\">Password</label>\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Enter your password\"\n          value={password}\n          onChange={this.handleChange}\n        />\n        <button onClick={this.onSubmit}>Login</button>\n      </form>\n    );\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n}\n\nexport default withRouter(LoginForm);\n","import React, { Component } from 'react';\nimport ReactDOM from \"react-dom\";\nimport ReactDataGrid from 'react-data-grid';\nimport 'react-data-grid/dist/react-data-grid.css';\n\nimport createRowData from \"./createRowData\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom/cjs/react-router-dom.min';\nimport { Redirect } from 'react-router';\nconst COLUMN_WIDTH = 140;\n\nconst columns = [\n  {\n    key: \"id\",\n    name: \"ID\",\n    frozen: true,\n    width: COLUMN_WIDTH\n  },\n  {\n    key: \"title\",\n    name: \"Title\",\n    frozen: true,\n    width: COLUMN_WIDTH\n  },\n  {\n    key: \"firstName\",\n    name: \"First Name\",\n    frozen: true,\n    width: COLUMN_WIDTH\n  },\n  {\n    key: \"lastName\",\n    name: \"Last Name\",\n    frozen: true,\n    width: COLUMN_WIDTH\n  },\n  {\n    key: \"email\",\n    name: \"Email\",\n    width: COLUMN_WIDTH\n  },\n  {\n    key: \"street\",\n    name: \"Street\",\n    width: COLUMN_WIDTH\n  },\n  {\n    key: \"zipCode\",\n    name: \"ZipCode\",\n    width: COLUMN_WIDTH\n  },\n  {\n    key: \"date\",\n    name: \"Date\",\n    width: COLUMN_WIDTH\n  },\n  {\n    key: \"bs\",\n    name: \"bs\",\n    width: COLUMN_WIDTH\n  },\n  {\n    key: \"catchPhrase\",\n    name: \"Catch Phrase\",\n    width: COLUMN_WIDTH\n  },\n  {\n    key: \"companyName\",\n    name: \"Company Name\",\n    width: COLUMN_WIDTH\n  },\n  {\n    key: \"sentence\",\n    name: \"Sentence\",\n    width: COLUMN_WIDTH\n  }\n];\nconst ROW_COUNT = 10;\nconst rows = createRowData(10);\nclass Freezecolum extends Component{\n   render(){\n       return(\n        <div className=\"App\">\n            <ReactDataGrid\n            columns={columns}\n            rowGetter={i => rows[i]}\n            rowsCount={ROW_COUNT}\n            minHeight={600} />\n        </div>);\n   }\n}\nexport default Freezecolum;","import faker from \"faker\";\n\nfunction createFakeRow(index) {\n  return {\n    id: index,\n    avartar: faker.image.avatar(),\n    county: faker.address.county(),\n    email: faker.internet.email(),\n    title: faker.name.prefix(),\n    firstName: faker.name.firstName(),\n    lastName: faker.name.lastName(),\n    street: faker.address.streetName(),\n    zipCode: faker.address.zipCode(),\n    date: faker.date.past().toLocaleDateString(),\n    bs: faker.company.bs(),\n    catchPhrase: faker.company.catchPhrase(),\n    companyName: faker.company.companyName(),\n    words: faker.lorem.words(),\n    sentence: faker.lorem.sentence()\n  };\n}\n\nexport default function createRowData(count) {\n  return [...Array(count).keys()].map(i => createFakeRow(i));\n}","import React, { Component } from 'react';\nimport './App.css';\nimport LoginForm from \"./logincompo/LoginForm\";\nimport Datainfo from \"./datalist/Datainfo\";\nimport ReactDOM from \"react-dom\";\nimport ReactDataGrid from 'react-data-grid';\nimport 'react-data-grid/dist/react-data-grid.css';\nimport Freezcolumn from \"./datalist/Freezecolum\";\nimport createRowData from \"./datalist/createRowData\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom/cjs/react-router-dom.min';\nimport { Redirect } from 'react-router';\n\n  class App extends Component {\n    constructor(){\n     super();\n     this.state =  {\n       list: {name: \"hello\"}\n     }\n    }\n  render(){\n    return (\n    <div className=\"App\">\n      <Router>\n          <Route path=\"/\" exact>\n            <Redirect to=\"/login\"/>\n          </Route>\n          <Route path=\"/login\">\n          < LoginForm />\n          </Route>\n          <Route path=\"/datainfo\">\n            <Datainfo />\n          </Route>\n          <Route path=\"/freezcolumn\">\n            <Freezcolumn />\n          </Route>\n      </Router>\n      <div>\n        {this.state.list.name }\n      </div>\n    </div>\n\n  );\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}